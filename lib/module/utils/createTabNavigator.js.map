{"version":3,"names":["React","TabRouter","StackActions","SceneView","createNavigator","SwitchActions","createTabNavigator","TabView","NavigationView","Component","constructor","arguments","_defineProperty","_ref","route","screenProps","descriptors","props","descriptor","key","TabComponent","getComponent","createElement","navigation","component","_ref2","focused","tintColor","horizontal","options","tabBarIcon","_ref3","tabBarLabel","title","routeName","_ref4","tabBarAccessibilityLabel","label","_getLabelText","routes","state","indexOf","length","undefined","_ref5","tabBarTestID","_ref6","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_ref7","_isTabPress","Promise","resolve","then","defaultHandler","_makeDefaultHandler","tabBarOnPress","_ref8","tabBarOnLongPress","jumpTo","render","navigationConfig","_extends","getLabelText","getAccessibilityLabel","_getAccessibilityLabel","getTestID","_getTestID","renderIcon","_renderIcon","renderScene","_renderScene","onIndexChange","_handleIndexChange","onTabPress","_handleTabPress","onTabLongPress","_handleTabLongPress","config","router"],"sources":["createTabNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"],"mappings":"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"}